datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Folderimport {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  sku             String
  modelname       String
  description     String
  status          String?       @default("active")
  createdAt       DateTime      @default(now())
  fbxs            Fbxa[]
}


model Fbxa {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  downloadLink    String?
  folderId        String        @db.ObjectId
  folderimport    Folderimport  @relation(fields: [folderId], references: [id])
}



model Project {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  lightSettings LightSettings[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDefault   Boolean  @default(false) 

}
model Cameraproject{
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
name String
cameraSettings Camera[]
createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDefault   Boolean  @default(false) 

}

model Camera {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    cameraposition Json?
    near Float
    far  Float
    fov  Float
    minZoom       Float?    // Add this field as nullable
  maxZoom       Float?    // Add this field as nullable
  minPolarAngle Float?    // Already included but nullable
  maxPolarAngle Float?    // Already included but nullable
    targetPosition Json?
     cameraprojectId String @map("cameraprojectId")  @db.ObjectId
  cameraproject   Cameraproject  @relation(fields: [cameraprojectId], references: [id])


}

model LightSettings {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lightType     String
  intensity     Float
  position      Json? 
  targetPosition Json?   
  angle         Float?
  decay         Float?
  castShadow    Boolean
  name          String   ?
  projectId     String   @map("projectId") @db.ObjectId
  project       Project  @relation(fields: [projectId], references: [id])
}



model FabricMap {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  diffuseMapUrl         String?  
  envMapUrl             String?
  refractionMapUrl      String?  
  bumpMapUrl            String?  
  normalMapUrl          String?  
  displacementMapUrl    String?  
  clearcoatMapUrl       String?
  emissiveMapUrl        String?  
  sheenMapUrl           String?
  aoMapUrl              String?  
  metalnessMapUrl       String?  
  roughnessMapUrl       String?
  anisotropyMapUrl      String?
  diffuseMapUrll        String?  
  envMapUrll             String?
  refractionMapUrll      String?  
  bumpMapUrll            String?  
  normalMapUrll          String?  
  displacementMapUrll    String?  
  clearcoatMapUrll       String?
  emissiveMapUrll        String?  
  sheenMapUrll           String?
  aoMapUrll              String?  
  metalnessMapUrll       String?  
  roughnessMapUrll       String?
  anisotropyMapUrll      String?
  bumpScale             Float?   
  displacementScale     Float?   
  emissiveIntensity     Float? 
  emissiveColor           String?  
  metalness             Float?   
  roughness             Float?   
  displacementBias      Float?   
  flatShading           Boolean? 
  aoMapIntensity        Float?   
  clearcoat             Float?  
   normalScaleX          Float? 
   normalScaleY   Float? 
  envMapIntensity        Float?
  sheen                 Float? 
  fabricName            String?  
  fabricColor           String?  
  createdAt             DateTime @default(now())
  scaleX                Float?
  scaleY                Float?
  sheenRoughness        Float?
  anisotropy            Float? 
  envvMapUrl             String?
  materialName           String?
  nullMapUrl            String?
diffuseColorEnabled String?
  ior                   Float?
  refractionRatio       Float?
  sheenEnabled           String?
  emissiveColorR        Float?  
  emissiveColorG        Float?  
  emissiveColorB        Float?
  sheenColorR           Float?   
  sheenColorG           Float?
  sheenColorB           Float?
  diffuseColor          String?
  sheenColor             String?


}
